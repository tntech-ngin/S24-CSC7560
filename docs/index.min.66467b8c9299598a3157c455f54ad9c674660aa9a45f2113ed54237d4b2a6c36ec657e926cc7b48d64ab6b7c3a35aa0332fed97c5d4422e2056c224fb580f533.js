var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/F23-CSC4200/docs/prologue/schedule/",title:"Schedule",description:`This is a tentative schedule and will change.
Aug 19 -
Introduction, Social Contract, Expectations - Link to Mural Slides Books - Peterson \u0026amp; Davie, Computer Networks - a systems approach. Labs - Every Thursday, in class Week of Aug 20 - Aug 26 #Reading assignment for week 1 - Introduction, Chapter 1.2 - 1.5 Introduction - Terminologies, Circuit vs Packet Switching, Layers, Architectures vs Protocols Slides Network Performance, Bandwidth/Delay, Jitter Slides Thu, Aug 22 - Lecture Thu, Aug 24 - Lecture and Lab (Setting up Google Cloud VMs) Week of Aug 27 - Sep 02 #Reading assignment - Chapter 2-2.`,content:`This is a tentative schedule and will change.
Aug 19 -
Introduction, Social Contract, Expectations - Link to Mural Slides Books - Peterson \u0026amp; Davie, Computer Networks - a systems approach. Labs - Every Thursday, in class Week of Aug 20 - Aug 26 #Reading assignment for week 1 - Introduction, Chapter 1.2 - 1.5 Introduction - Terminologies, Circuit vs Packet Switching, Layers, Architectures vs Protocols Slides Network Performance, Bandwidth/Delay, Jitter Slides Thu, Aug 22 - Lecture Thu, Aug 24 - Lecture and Lab (Setting up Google Cloud VMs) Week of Aug 27 - Sep 02 #Reading assignment - Chapter 2-2.5
Links, Encoding, Frames, Point to point links, Byte Stuffing, Error detection Slides Reliable Delivery, Stop-n-wait, sliding window Slides Examples and Socket Programming Slides Thu, Aug 29 - Lecture Thu, Aug 31 - Lecture and Lab Week of Sep 03 - Sep 09 (Programming Assignment 1 due) #Reading assignment - Chapter 2.6-2.7
Links, Encoding, Frames, Point to point links, Byte Stuffing, Error detection Slides Reliable Delivery, Stop-n-wait, sliding window Slides Examples and Socket Programming Slides Tue, Sep 05 - Lecture Thu, Sep 07 - Lecture and lab Thu, Sep 09 - PA1 due Week of Sep 10 - Sep 16 #Spanning Tree, Loop detection Slides Ethernet, Wifi, CSMA-CA/CD, Transmitter algorithm, Collision avoidance, Slides Link Layer Recap Slides Tue, Sep 12 - Lecture Thu, Sep 14 - Lecture and Quiz Thu, Sep 14 - PA1 due Week of Sep 10 - Sep 16 #Reading assignment - Chapter 3-3.2.5, Basic IP
Switching Slides Addressing Slides Addressing, Fragmentation and Reassembly Slides Tue, Sep 12 Thu, Sep 14 Week of Sep 17 - Sep 23 (Programming Assignment 2 due) #Reading assignment Chapter - 3.2.6-3.2.9 ARP, DHCP Slides NAT, ICMP, Routing vs Switching Slides Tue, Sep 19 - Lecture Thu, Sep 21 - Lecture and Lab Sat, Sep 23 - PA2 due Week of Sep 24 - Sep 30 ( Exam 1) #Tue, Sep 26 - Recap Thu, Sep 28 - Exam 1 Week of Oct 01 - Oct 07 (Programming Assignment 3 due) #Reading assignment - Chapter 3.3
Routing Slides Routing, Issues with Scaling Slides BGP Slides Tue, Oct 03 - Lecture Thu, Oct 05 - Lab Sat, Oct 07 - PA3 due Week of Oct 08 - Oct 14 #Reading assignment - Chapter 4.1
BGP Slides Tue, Oct 10 (Holiday) Thu, Oct 12 - Lab Week of Oct 15 - Oct 21 #Reading assignment - 5.1, 5.2.1-5.2.5
MPLS, End to End communication UDP, TCP Slides [UDP] TCP Flow Control, Three way handshake Slides Tue, Oct 17 - Lecture Thu, Oct 19 - Lecture and Lab Week of Oct 22 - Oct 28 (Programming Assignment 4 due, Exam 2) #Reading assignment - Chapter 6.3
TCP Congestion control, Congestion avoidance Slides Tue, Oct 24 - Lecture and Recap Thu, Oct 26- Exam 2 Sat, Oct 26- PA4 due Week of Oct 29 - Nov 04 #Reading assignment - Chapter 9.1
Application, Email Slides Application, Email Slides Tue, Oct 31 - Lecture Thu, Nov 02 - Lecture and Lab Week of Nov 05 - Nov 11 #Reading assignment DNS Reading assignment HTTP
HTTP Slides Tue, Nov 07 - Lecture Thu, Nov 09 - Lecture and Lab Week of Nov 12 - Nov 18 (Programming Assignment 5 due) #Reading assignment - Chapter 8.1-8.2
Network Security, Symmetric Key Slides Network Security, Asymmetric Key Slides Network Security, VPN/IPSec Slides Tue, Nov 14 - Lecture Thu, Nov 16 - - Lecture and Lab Sat, Nov 18 - PA5 due Week of Nov 19 - Nov 25 (Exam 3) #Tue, Nov 21 - Exam 3 Thu, Nov 23 (Holiday - Nov 22-24) Week of Nov 26 - Dec 02 #Next generation network - Software Defined Network and Named Data Networking.Slides Tue, Nov 28 - Lecture Thu, Nov 30 - Last day of class `}),e.add({id:1,href:"/F23-CSC4200/docs/prologue/lab1/",title:"Lab 1: Setting Up and Testing Virtual Machines on Google Cloud",description:`Note: The following guide provides step-by-step instructions for creating and configuring virtual machines (VMs) on the Google Cloud Platform (GCP). Subsequently, the guide outlines the process of establishing network connectivity between these VMs using the \u0026ldquo;ping\u0026rdquo; command. This exercise aims to provide students with a practical understanding of cloud-based virtualization, network configuration, and basic connectivity testing. This lab is ungraded.
Lab Objectives #Creating two virtual machines on Google Cloud. Configuring network settings for the VMs.`,content:`Note: The following guide provides step-by-step instructions for creating and configuring virtual machines (VMs) on the Google Cloud Platform (GCP). Subsequently, the guide outlines the process of establishing network connectivity between these VMs using the \u0026ldquo;ping\u0026rdquo; command. This exercise aims to provide students with a practical understanding of cloud-based virtualization, network configuration, and basic connectivity testing. This lab is ungraded.
Lab Objectives #Creating two virtual machines on Google Cloud. Configuring network settings for the VMs. Testing network connectivity between the VMs using the \u0026ldquo;ping\u0026rdquo; command. Prerequisites #An active Google Cloud account. Cloud Credit Code. Student Coupon Retrieval Link You will be asked for a name and email address, which needs to match your school domain. A confirmation email will be sent to you with a coupon code. You can request a coupon from the URL and redeem it until: 12/17/2023 Coupon valid through: 8/17/2024 You can only request ONE code per unique email address. Basic familiarity with command-line interfaces and networking concepts. Step 1: Creating Virtual Machines #Log in to your Google Cloud Console. Navigate to the Compute Engine section and click on \u0026ldquo;VM instances.\u0026rdquo; Click the \u0026ldquo;Create Instance\u0026rdquo; button to create your first VM. Choose a suitable name and region for your VM. Select a machine type based on your requirements. Configure boot disk settings. Configure firewall rules to allow ICMP (ping) traffic. Repeat the above steps to create a second VM with a distinct name. Step 2: Configuring Network Settings #Once both VMs are created, take note of their internal and external IP addresses. To enable communication between the VMs, configure their firewall settings to allow ICMP traffic. In the \u0026ldquo;Firewall\u0026rdquo; section, establish a new firewall rule. Provide a name and description for the rule. Set the target tags to match the VMs you\u0026rsquo;ve created. Define the source IP ranges as the internal IP address of the other VM. Allow ICMP protocol. Step 3: Testing Connectivity #Access one of the VMs through SSH using a terminal or command prompt. Utilize the \u0026ldquo;ping\u0026rdquo; command to examine connectivity to the other VM. `}),e.add({id:2,href:"/F23-CSC4200/docs/prologue/lab2/",title:"Lab 2: Use basic networking tools",description:`This lab counts towards your class participation grade
Initial Setup #We will utilize the VMs we created in LAB 1. Open a terminal (can be in your browser or on your laptop) and log into the VMs. Turn in the following (you may use Google and/or collaborate with other students) #Please submit one PDF with your work. You might find the “man” command to be very useful.
SSH into two instances and perform the following tests:`,content:`This lab counts towards your class participation grade
Initial Setup #We will utilize the VMs we created in LAB 1. Open a terminal (can be in your browser or on your laptop) and log into the VMs. Turn in the following (you may use Google and/or collaborate with other students) #Please submit one PDF with your work. You might find the “man” command to be very useful.
SSH into two instances and perform the following tests:
Run ping between two instances and record the outputs for both internal and external interfaces. (5pts) Submit the output as a screenshot and a table that briefly explains each field of the output. (5pts) Install traceroute (sudo apt update \u0026amp;\u0026amp; sudo apt install traceroute). Run traceroute to \u0026ldquo;tntech.edu\u0026rdquo;, record the output (5 pts) Submit the output as a screenshot and briefly explain each field (5 pts) Run ifconfig and record the output. (5pts) Submit the output as a screenshot and the following information for an interface such as “eth0”: IP address, Ethernet Address, netmask, and MTU (5 pts) Run the folloiwing command \u0026ldquo;ip route show\u0026rdquo; and submit the output as a screenshot (5 pts) Explain the first line of the output (5 pts) `}),e.add({id:3,href:"/F23-CSC4200/docs/prologue/lab3/",title:"Lab 3: Introduction to Socket Programming",description:`This lab is ungraded but counts towards your participation grade
Initial Setup #We will utilize the VMs we created in LAB 1. Log into two VMs. Follow along with the instructor. At the end of the lab, you will be able to create a simple client and server. `,content:`This lab is ungraded but counts towards your participation grade
Initial Setup #We will utilize the VMs we created in LAB 1. Log into two VMs. Follow along with the instructor. At the end of the lab, you will be able to create a simple client and server. `}),e.add({id:4,href:"/F23-CSC4200/docs/prologue/pa1/",title:"Program 1",description:`This is an INDIVIDUAL Assignment (Do not collaborate) Due - Sept 14, Thursday, 11:59PM
Instructions #Create two separate Python files for the server and client, named server.py and client.py, respectively.
Copy and paste the provided skeleton code into the respective files.
Complete the server code by implementing the missing function calls where indicated by comments. The server should be able to accept connections, receive long messages from clients, process them, and echo back the same message.`,content:`This is an INDIVIDUAL Assignment (Do not collaborate) Due - Sept 14, Thursday, 11:59PM
Instructions #Create two separate Python files for the server and client, named server.py and client.py, respectively.
Copy and paste the provided skeleton code into the respective files.
Complete the server code by implementing the missing function calls where indicated by comments. The server should be able to accept connections, receive long messages from clients, process them, and echo back the same message.
Complete the client code by implementing the missing function calls where indicated by comments. The client should connect to the server, allow the user to input long messages, send them to the server, and display the server\u0026rsquo;s responses.
Test your server and client by running them in separate VMs. Ensure they can communicate and exchange very long messages successfully.
You should perform error handling, add comments for clarity, and optimize the code as needed.
Submit your completed server.py and client.py files for evaluation. Submit through iLearn.
Remember to follow good coding practices and error handling techniques. Ensure that your implementation can handle very long messages without issues.
Server Skeleton Code #import socket # Create a socket object # Define the server address and port # Bind the socket to the server address # Replace the following line with code to bind the socket # Listen for incoming connections (max 5 clients in the queue) # Replace the following line with code to listen for connections print(\u0026quot;Server is listening on\u0026quot;, server_address) while True: # Wait for a client to connect # Replace the following line with code to accept a client connection # Print a message to indicate the client connection # Replace the following line with appropriate logging # Handle client data while True: # Receive data from the client # Replace the following line with code to receive data # ensure you can receive long messages # Process and respond to the client's data # Replace the following line with your data processing logic # Send the response back to the client # Replace the following line with code to send back the same message # Close the client socket # Replace the following line with code to close the client socket Client Skeleton Code #import socket # Create a socket object # Define the server address and port # Connect to the server # Replace the following line with code to connect to the server while True: # Get user input message = input(\u0026quot;Enter a message to send to the server (or 'exit' to quit): \u0026quot;) # Send the message to the server # Replace the following line with code to send the message # Receive and print the server's response # Replace the following line with code to receive and print the response # Make sure you are able to receive long messages # Close the client socket # Replace the following line with code to close the client socket Assignment Rubric #Client Implementation (40 points) #Client Runs (10 points):
The client code runs without errors. Client Runs on Separate VM (10 points):
The client can run on a separate VM and communicate with the server. Exception Handling (10 points):
The client code correctly checks and raises appropriate exceptions for the following socket-related calls: socket.socket() socket.connect() socket.send() socket.recv() Long Message Handling (10 points):
The client can send and receive very long messages (consider testing with messages of at least 1MB in size). Server Implementation (40 points) #Server Runs (10 points):
The server code runs without errors. Server Runs on Separate VM (10 points):
The server can run on a separate VM and communicate with the client. Exception Handling (10 points):
The server code correctly checks and raises appropriate exceptions for the following socket-related calls: socket.socket() socket.bind() socket.listen() socket.accept() socket.send() socket.recv() Long Message Handling (10 points):
The server can receive and process very long messages (consider testing with messages of at least 1MB in size). Best coding practices (20 points) #Error Handling (up to 10 points):
Exit gracefully after client receives the message Server never exits Code Clarity and Comments (up to 10 points):
The code is well-commented and easy to understand, making use of meaningful variable and function names. Total Points: /100
`}),e.add({id:5,href:"/F23-CSC4200/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:6,href:"/F23-CSC4200/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()